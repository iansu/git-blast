#!/usr/bin/env node

const https = require('https');
const { execSync } = require('child_process');

const twitterUsernames = {};

const githubRequest = async (path) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.github.com',
      port: 443,
      path: path,
      method: 'GET',
      headers: { 'User-Agent': 'git-blast' },
    };

    https
      .get(options, (resp) => {
        let data = '';
        // A chunk of data has been received.
        resp.on('data', (chunk) => {
          data += chunk;
        });
        // The whole response has been received. Print out the result.
        resp.on('end', () => {
          // console.log(data);

          resolve(JSON.parse(data));
        });
      })
      .on('error', (err) => {
        console.log('Error: ' + err.message);

        reject(err);
      });
  });
};

const getTwitterByEmail = async (email) => {
  if (twitterUsernames[email] || twitterUsernames[email] === null) {
    return twitterUsernames[email];
  } else {
    const searchResults = await githubRequest(`/search/users?q=${encodeURIComponent(email)}`);

    if (searchResults && searchResults.items && searchResults.items.length > 0) {
      const githubLogin = searchResults.items[0].login;

      if (githubLogin) {
        const user = await githubRequest(`/users/${githubLogin}`);

        if (user && user.twitter_username) {
          twitterUsernames[email] = user.twitter_username;

          return user.twitter_username;
        }
      } {
        twitterUsernames[email] = null;
      }
    } else {
      twitterUsernames[email] = null;
    }
  }
};

const gitBlame = (args) => {
  try {
    const results = execSync(`git blame -e ${args.join(' ')}`);

    return results.toString();
  } catch (error) {
    console.log(error);
  }
};

const emailToTwitter = async (blameOutput) => {
  const lines = blameOutput.split('\n');

  for (const line of lines) {
    const matches = line.match(/<(.+@.+)>/);

    if (matches && matches[1] && !matches[1].startsWith('not.committed.yet')) {
      const email = matches[1];
      const twitter = await getTwitterByEmail(email);

      if (twitter) {
        const twitterUsername = `<@${twitter}>`.padEnd(email.length + 2);

        console.log(line.replace(/<.+@.+>/, twitterUsername));
      } else if(line) {
        console.log(line);
      }
    } else if (line) {
      console.log(line);
    }
  }
};

(async () => {
  const args = process.argv.slice(2);
  await emailToTwitter(gitBlame(args));
})();
